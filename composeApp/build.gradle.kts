import org.jetbrains.compose.desktop.application.dsl.TargetFormat
import org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    alias(libs.plugins.kotlinMultiplatform)
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.composeMultiplatform)
    alias(libs.plugins.composeCompiler)
    alias(libs.plugins.google.services)
    alias(libs.plugins.firebase.crashlytics)
    kotlin("plugin.serialization") version "2.1.10" // Use your Kotlin version
    kotlin("native.cocoapods")
}

kotlin {
    androidTarget {
        compilerOptions {
            jvmTarget.set(JvmTarget.JVM_17)
        }
    }

    cocoapods {
        version = "1.0.0" // Specify your framework's version
        summary = "ComposeApp" // Add a summary
        homepage = "https://haumealabs.com" // Optional homepage
        name = "ComposeApp" // Explicitly set the podspec name
        ios.deploymentTarget = "13.0" // Increased from 11.0

        // Specify the name of the Xcode framework generated by KMP
        framework {
            baseName = "ComposeApp" // Should match the baseName in binaries.framework
            isStatic = true // Or false, depending on your needs
        }

        // Link to the iosApp's Podfile
        podfile = project.file("../iosApp/Podfile")

    }
    
    listOf(
        iosX64(),
        iosArm64(),
        iosSimulatorArm64()
    ).forEach { iosTarget ->
        iosTarget.binaries.framework {
            baseName = "ComposeApp"
            isStatic = true
            freeCompilerArgs += "-Xbinary=bundleId=com.haumealabs.kmpbase.ComposeApp"
        }
    }
    
    sourceSets {

        named { it.lowercase().startsWith("ios") }.configureEach {
            languageSettings {
                optIn("kotlinx.cinterop.ExperimentalForeignApi")
            }
        }
        
        androidMain.dependencies {
            implementation(compose.preview)
            implementation(libs.androidx.activity.compose)

            //Ktor
            implementation(libs.ktor.client.android)
            implementation(libs.ktor.client.okhttp)
            implementation(libs.ktor.client.content.negotiation)
            implementation(libs.ktor.serialization.kotlinx.json)

            //Review
            implementation(libs.review)
            implementation(libs.review.ktx)

            //Firebase
            implementation(project.dependencies.platform(libs.firebase.bom))
            implementation(libs.firebase.crashlytics.ktx)
            implementation(libs.firebase.analytics.ktx)

            //Admob
            implementation(libs.play.services.ads)
        }
        commonMain.dependencies {
// Ktor BOM - Keep this
            implementation(platform("io.ktor:ktor-bom:2.3.7"))

            // === Compottie ===
            implementation(libs.compottie)
            implementation("io.github.alexzhirkevich:compottie-network:2.0.0-rc04") {
                exclude(group = "io.ktor")
            }
            implementation(libs.compottie.dot)

            // === Purchases KMP ===
            implementation("com.revenuecat.purchases:purchases-kmp-core:1.7.4+13.28.0") {
                exclude(group = "io.ktor")
            }
            implementation("com.revenuecat.purchases:purchases-kmp-core:1.7.4+13.28.0") { // Optional
                exclude(group = "io.ktor")
            }
            implementation("com.revenuecat.purchases:purchases-kmp-core:1.7.4+13.28.0") { // Optional
                exclude(group = "io.ktor")
            }
            implementation("com.revenuecat.purchases:purchases-kmp-ui:1.7.4+13.28.0") { // Optional
                exclude(group = "io.ktor")
            }

            // === Ensure ALL necessary Ktor modules are listed EXPLICITLY ===
            // (Versions controlled by BOM)
            implementation(libs.ktor.client.core)
            implementation(libs.ktor.client.content.negotiation) // Needed for the error source
            implementation(libs.ktor.client.websockets)
            implementation(libs.ktor.serialization.kotlinx.json) // Needed for content negotiation

            implementation(compose.runtime)
            implementation(compose.foundation)
            implementation(compose.material)
            implementation(compose.ui)
            implementation(compose.components.resources)
            implementation(compose.components.uiToolingPreview)
            implementation(libs.coil.compose)
            implementation(libs.firebase.analytics)
            implementation(libs.androidx.lifecycle.viewmodel)
            implementation(libs.androidx.lifecycle.runtime.compose)
            implementation(libs.kotlinx.serialization.json)
            implementation(libs.kotlinx.datetime)
            implementation(libs.lifecycle.viewmodel.compose)
            implementation(libs.voyager.navigator)
            implementation(libs.voyager.screenmodel)
            implementation(libs.voyager.bottom.sheet.navigator)
            implementation(libs.voyager.transitions)

            implementation(libs.basic.ads)
            implementation(libs.play.services.ads)
        }

        iosMain.dependencies {
            implementation(libs.ktor.client.darwin)
        }

    }
}

listOf(
    ":composeApp:cinteropGoogleMobileAdsIosX64",
    ":composeApp:cinteropGoogleMobileAdsIosArm64",
    ":composeApp:cinteropGoogleMobileAdsIosSimulatorArm64"
).forEach { taskName ->
    tasks.matching { it.name == taskName.substringAfterLast(':') && it.path.startsWith(taskName.substringBeforeLast(':')) }.configureEach {
        dependsOn(tasks.named("podInstall"))
    }
}

android {
    namespace = "com.haumealabs.kmpbase"
    compileSdk = libs.versions.android.compileSdk.get().toInt()

    defaultConfig {
        applicationId = "com.haumealabs.kmpbase"
        minSdk = libs.versions.android.minSdk.get().toInt()
        targetSdk = libs.versions.android.targetSdk.get().toInt()
        versionCode = 1
        versionName = "1.0"
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
    buildTypes {
        getByName("release") {
            isMinifyEnabled = false
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    buildFeatures {
        compose = true
        buildConfig = true
    }

    // Modify this block to force BOTH Ktor and kotlinx-serialization-json versions
    configurations.configureEach {
        val config = this
        // Apply to configurations involved in building the final classpath
        // Including configurations related to KMP metadata and native compilations might be necessary
        // if (config.name.contains("compileClasspath", ignoreCase = true) || config.name.contains("runtimeClasspath", ignoreCase = true)) { // Original check

        // Broader check for configurations (might be needed for native linking issues)
        if (config.isCanBeResolved) { // Apply to all resolvable configurations
            config.resolutionStrategy.eachDependency {
                // Force Ktor version
                if (requested.group == "io.ktor") {
                    useVersion(libs.versions.ktorClientAndroid.get()) // Uses 2.3.7 from TOML
                    because("Ensure consistent Ktor version (${libs.versions.ktorClientAndroid.get()})")
                }
                // ALSO Force kotlinx-serialization-json version
                if (requested.group == "org.jetbrains.kotlinx" && requested.name.contains("kotlinx-serialization-json")) { // Check name contains just in case
                    useVersion(libs.versions.kotlinxSerializationJson.get()) // Uses 1.8.0 from TOML
                    because("Ensure consistent kotlinx-serialization-json version (${libs.versions.kotlinxSerializationJson.get()})")
                }
            }
        }
    }
}

dependencies {
    debugImplementation(compose.uiTooling)
}

